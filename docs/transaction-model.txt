Transaction (L2), Data (L3)
uuid
    - for component instances
        - phases: 
            Configuration
            Initialization      
            Running
            Restart     - new uuid
            Shutdown
        - carousel
        - coded prefix (3/4 characters)
    - for transaction instances (at INFO level)
    - same uuid used in DEBUG statements that
      contains data model details
Transaction data model
Enumeration of component names and function points
Versioning


                        LOG TRANSACTION MODEL

        +---------+---------------+-----------------------------------+
        |Version  |  Date         |  Comment                          |
        +---------+---------------+-----------------------------------+
        |0.1      |  28/May/2021  |  Initial draft                    |
        +---------+---------------+-----------------------------------+

                            Abstract
                            --------
        This document seeks propose a model for transactions based 
        on the document 'some_thoughts_on_training.txt version 0.21'.


                            References
                            ----------

        (a) https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf


                        +-------------+
                        | Section - I |
                        |    SCOPE    |
                        +-------------+


    (A) What do we want ?

        The document 'some_thoughts_on_training.txt version 0.21'
        presented a mechanism by which component interactions can
        be captured and visualized for the purposes of training.

        This document extends this by presenting certain nuances 
        relating to component interactions (constrained to the scope 
        of training). Visualization is not covered here.


    (B) What are we interested in ?

        Restating 'some_thoughts_on_training.txt version 0.21':

        (a) We are interested when 

            (1) Two components interact through an interface. An interface
                that is provided by one component and exercised by another.
                Particularly when one component invokes a specific function 
                of the interface of another.

            (2) When a component 'announces' the occurance of an event to 
                other 'subscribing' component(s) (perhaps through an event 
                bus).

        (b) We are interested in the causality of interactions. i.e. which
            interaction/event caused another interaction/event to occur as
            an effect. As a generalization, we are interested in the causality
            tree.


    (C) What is the transactional model ?

        The transactional model is a data model intended to capture component
        interactions at a basic level.


    (D) Who is the audience ?

        (a) People who need an overview about components present in amagi's 
            broadcast solution.

        (b) Operational L2 support.
            This document does not cover L3 support that requires elaborate 
            details of each interaction.


                        +----------------+
                        | Section - II   |
                        | CONSIDERATIONS |
                        +----------------+


    In this section we will present the considerations that lead to 
    the definition of the transactional model.

    (A) What constitutes and interaction (transaction) ?

        (a) In a request-response scenario it is

            (1) The requestor component name
            (2) The responder component name
            (3) The function name (belonging to a specific interface)
            (4) An unique id that identifies the request
            (5) A 'parent' id that caused this request.

            Note that details of the function such as its parameters
            are not covered in this document.

        (b) In a event 'broadcast' model it is

            (1) The event-source component name
            (2) One or more event-sink component name(s)
            (3) The event name
            (4) An unique id that identifies the emission of the event
            (5) An 'parent' id that identifies the cause of emission of 
                the event

            Note that details of the event such as its attributes
            are not covered in this document.

    (B) Component name

        (a) Components take on one of the following roles for a given 
            interaction
            (1) requestor
            (2) responder
            (3) event-source 
            (4) event-sink

        (b) Component names must be unique that we may 
            (1) differentiate them from one another
            (2) differentiate between possibly multiple instances of
                the same component that are concurrently running
                on the same or different machines
            (3) differentiate between a newly created instance or
                a restored instance.


    (C) Function and event names

        (a) Every function name must be unique in a given interface.
            This assumes that every interface name must be unique.

        (b) Every event name must be unique.

        (c) As far as the model is concerned, it is not necessary to
            elucidate the actual function parameters of event attributes
            during an interaction.


    (D) Interaction/Transaction identification

        (a) Every transaction must be uniquely identifiable.

        (b) A request and the corresponding response must possess the 
            same id.

        (c) Every transaction MUST have a causal/parent transaction.
            The only exceptions to this are
            (1) a request/event issued on a timer expiry 
            (2) a user initiated action


    (E) Versioning

        (a) The version of the model must be identifiable.

        (b) The versions of components/functions/events must
            be identifiable.


                        +---------------+
                        | Section - III |
                        | DEFINITIONS   |
                        +---------------+


    (A) INSTANCES

        Instance : a single occurance of something 

        That something/object can be a 
            * Component
            * Interaction/Transaction
                * Function request
                * Event emission

        There can be
            * Multiple running instances of the same component
            * Multiple instances of invocation of the same interface-function.
            * Multiple instances of the emission of the same event.

        Clarity arises when each instance can be identified uniquely.

    (B) UID

        Unique ID. This could be a UUID, SHA-* hash, a running counter 
        within a namespace, etc..
        An UID is expected to be unique for a time duration that allows 
        for debugging of field issues. A period of at least 6 months if 
        not eternity.

        An UID

        (a) Plain-UID
            this is an opaque identifier referring to a set of attributes 
            (typically name=value pairs) of an object.
            eg: 1622298779 referring to 
                {name={name}, started_at={datetime}..., ...)

        (b) Desc-UID (Descriptive UID)
            encodes the attributes in the UID itself.
            eg: {name}-1780198901-{datetime}

        (c) Comb-UID (Combination UID)
            is a combination of (a) and (b)
            eg: {name}/1780195567 refering to 
                {name={name}, started_at={datetime}..., ...)

    (C) Notations/Terms

        {xxx}   : refers to a value of the type xxx
        {a|b|c} : one of 'a', 'b' or 'c'
        STRNW   : Camel-case string with no white-spaces
        ANSNW   : Alpha numeric string with no white-spaces


                        +---------------+
                        | Section - III |
                        | THE MODEL     |
                        +---------------+


    (A) Identifying components

        (a) Every component can be uniquely identified through an {Comb-UID}
            of the form {CompId}/{CompUID}

            where 
                * {CompId} is an {STRNW} referring to the component name.

                * {CompUID} is an {UID} referring to an unique instance 
                  of the component.

        (b) This refers to a tuple consisting of name=value pairs:

            COMPID={CompId}

            COMPUID={CompUID}

            COMPID={CompId}/{CompUID}

            COMPDESC={description of the component}
                eg: "Cloudport Media Player"

            COMPSTARTEDAT={iso-8601-utc-with-milliseconds}
                see: https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)
                see: https://stackoverflow.com/a/50570660/1029379

            COMPSTATE={startup|initialization|running|restored|shutdown}
                startup     : component has just been loaded
                initialized : component has been configured
                running     : component is now running normally
                restored    : component started with previous state after a 
                              crash
                shutdown    : component has been shutdown

            COMPVERSION={version}
                The software version of the component

        (c) The above tuple MUST occur as a log line 

            (1) Every time there is a state change to the component
                See State values in (b)
            (2) As a carousel, minimally once every n-minutes


    (B) Identifying functions

        Every function can be uniquely identified through

        {IFId}/{IFVer}/{FNXId}

        where
            * {IFId} is an {STRNW} referring to the interface name.

            * {IFVer} is a {version} referring to the software version
              of the interface.

            * {FNXId} is an {STRNW} referring to the function name.


    (C) Identifying events

        Every event can be uniquely identified through

        {EVClassId}/{EVClassVer}/{EVId}

        where
            * {EVClassId} is an {STRNW} referring to a semantically related
              set of events.

            * {EVClassVer} is a {version} referring to the software version
              of the {EVClassId}.

            * {EVId} is an {STRNW} referring to the event name.


    (D) Identifying transactions

        Every transaction can be uniquely identified through

        TXM/{TXMVer}/{TXId}

        where
            * 'TXM' is a keyword for 'Transaction Model'.

            * {TXMVer} is a {version} identification the version of this
              specification.

            * {TXId} is an {ANSNW} referring to a transaction instance.


        (a) In the case of a function invocation, the transaction refers 
            to a tuple consisting of name=value pairs:

            TXID=TXM/{TXMVer}/{TXId}

            PARENTTXID={TXId}
                Indentifying the parent/causal transaction

            FNXID={IFId}/{IFVer}/{FNXId}
                Identifying the function

            ACT={request|response}
                Activity : A request or a response

            LOC={src|dest}
                src  => logged at requesting component end
                dest => logged at responding component end

            COMPID={CompId}/{CompUID}
                The component id (see LOC)

        (b) The above tuple MUST occur as a log line 

            Every time a interface function invocation is made across 
            components.

        (d) In the case of a event emissions, the transaction refers
            to a tuple consisting of name=value pairs:

            TXID=TXM/{TXMVer}/{TXId}

            PARENTTXID={TXId}
                Indentifying the parent/causal transaction

            EVID={EVClassId}/{EVClassVer}/{EVId}
                Identifying the event

            ACT='event'

            LOC={src|dest}
                src  => logged at component that published the event
                dest => logged at component that consumed the event

            COMPID={CompId}/{CompUID}
                The component id (see LOC)

        (e) The above tuple MUST occur as a log line 

            Every time an event is published across components.
            

