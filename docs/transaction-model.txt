
                    TRANSACTIONAL LOGGING MODEL

        +---------+---------------+-----------------------------------+
        |Version  |  Date         |  Comment                          |
        +---------+---------------+-----------------------------------+
        |0.1      |  28/May/2021  |  Initial draft                    |
        +---------+---------------+-----------------------------------+

                            Abstract
                            --------
        This document seeks propose a model for transactions based 
        on the document 'some_thoughts_on_training.txt version 0.21'.


                            References
                            ----------

        (a) https://www.ics.uci.edu/~fielding/pubs/dissertation/fielding_dissertation.pdf


                        +-------------+
                        | Section - I |
                        |    SCOPE    |
                        +-------------+


    (A) What do we want ?

        The document 'some_thoughts_on_training.txt version 0.21'
        presented a mechanism by which component interactions can
        be captured and visualized for the purposes of training.

        This document extends this by presenting certain nuances 
        relating to component interactions (constrained to the scope 
        of training). Visualization is not covered here.


    (B) What are we interested in ?

        Restating 'some_thoughts_on_training.txt version 0.21':

        (a) We are interested when 

            (1) Two components interact through an interface. An interface
                that is provided by one component and exercised by another.
                Particularly when one component invokes a specific function 
                of the interface of another.

            (2) When a component 'announces' the occurance of an event to 
                other 'subscribing' component(s) (perhaps through an event 
                bus).

        (b) We are interested in the causality of interactions. i.e. which
            interaction/event caused another interaction/event to occur as
            an effect. As a generalization, we are interested in the causality
            tree.


    (C) What is the transactional model ?

        The transactional model is a data model intended to capture component
        interactions at a basic level.

        This model concerns itself with components and invocation-points.
        This model is not concerned about the data associated with transactions
        or the connectors through which these transactions are achieved.


    (D) Who is the audience ?

        (a) People who need an overview about components present in amagi's 
            broadcast solution.

        (b) Operational L2 support.
            This document does not cover L3 support that requires elaborate 
            details of each interaction.


                        +----------------+
                        | Section - II   |
                        | CONSIDERATIONS |
                        +----------------+


    In this section we will present the considerations that lead to 
    the definition of the transactional model.

    (A) What constitutes a transaction (interaction) ?

        (a) In a request-response scenario it is

            (1) The requestor component name
            (2) The responder component name
            (3) The function name (belonging to a specific interface)
            (4) An unique id that identifies the request
            (5) A 'parent' id that caused this request.

            Note that details of the function such as its parameters
            are not covered in this document.

        (b) In a event 'broadcast' model it is

            (1) The event-source component name
            (2) One or more event-sink component name(s)
            (3) The event name
            (4) An unique id that identifies the emission of the event
            (5) An 'parent' id that identifies the cause of emission of 
                the event

            Note that details of the event such as its attributes
            are not covered in this document.

    (B) Component name

        (a) Components take on one of the following roles for a given 
            interaction
            (1) requestor
            (2) responder
            (3) event-source 
            (4) event-sink

        (b) Component names must be unique that we may 
            (1) differentiate them from one another
            (2) differentiate between possibly multiple instances of
                the same component that are concurrently running
                on the same or different machines
            (3) differentiate between a newly created instance or
                a restored instance.


    (C) Function and event names

        (a) Every function name must be unique in a given interface.
            This assumes that every interface name must be unique.

        (b) Every event name must be unique.

        (c) As far as the model is concerned, it is not necessary to
            elucidate the actual function parameters and event attributes
            during an interaction.

    (D) Interaction/Transaction identification

        (a) Every transaction must be uniquely identifiable.

        (b) A request and the corresponding response must possess the 
            same identification.

        (c) Every transaction MUST have a causal/parent transaction.
            The only exceptions to this are
            (1) a request/event issued on a timer expiry 
            (2) a user initiated action
            TODO

    (E) Versioning

        (a) The version of the transaction model must be identifiable.

        (b) The versions of components/functions/events must
            be identifiable.


    (F) Logging asymmetry

        The details pertaining to identification of a component, function 
        or events will differ based on the location of logging.

        For example during a interface/function invocation the requestor
        may just have information to specify interface-name/function-name
        whereas the responder may have additional pieces of information to
        specify interface-name/interface-version/function-name.

        Another example during a interface/function invocation is the 
        specification of the responder name at the requestors end. This
        would be as simple as responder-component-name. At the responders
        end this would be responder-component-name/UID which would in turn
        refer to more details about the component (dealt in 
        MODEL/Identifying components later on).

        The critical piece of information that connects the logs at 
        different locations is the transaction itself which would have an
        identical representation at both ends.


                        +---------------+
                        | Section - III |
                        | DEFINITIONS   |
                        +---------------+


    (A) INSTANCES

        Instance : a single occurance of something 

        That something/object can be a 
            * Component
            * Interaction/Transaction
                * Function request
                * Event emission

        There can be
            * Multiple running instances of the same component
            * Multiple instances of invocation of the same interface-function.
            * Multiple instances of the emission of the same event.

        Clarity arises when each instance can be identified uniquely.

    (B) UID

        Unique ID. This could be a UUID, SHA-* hash, a running counter 
        within a namespace, etc..
        An UID is expected to be unique for a time duration that allows 
        for debugging of field issues. A period of at least 6 months if 
        not eternity.

        An UID can be one of the following

        (a) Plain-UID
            this is an opaque identifier referring to a set of attributes 
            (typically name=value pairs) of an object.
            eg: 1622298779 referring to 
                {name={name}, started_at={datetime}..., ...)

        (b) Desc-UID (Descriptive UID)
            encodes the attributes in the UID itself.
            eg: {name}-1780198901-{datetime}

        (c) Comb-UID (Combination UID)
            is a combination of (a) and (b)
            eg: {name}/1780195567 refering to 
                {name={name}, started_at={datetime}..., ...)

    (C) Notations/Terms

        {xxx}   : refers to a value of the type xxx
        {a|b|c} : one of 'a', 'b' or 'c'
        STRNW   : Camel-case string with no white-spaces
        ANSNW   : Alpha numeric string with no white-spaces
        
        Component, function, event and transaction references are 
        prefixed with COMP, FNX, EV, TXM to indicate different
        namespaces.


                        +---------------+
                        | Section - III |
                        | THE MODEL     |
                        +---------------+

    (A) Identifying components

        (a) Every component can be uniquely identified through an Comb-UID
            of the form COMP/{CompId}/{CompUID}

            where 
                * 'COMP' is a keyword 

                * {CompId} is an {STRNW} referring to the component name.

                * {CompUID} is an {UID} referring to an unique instance 
                  of the component.

            example

                COMP/CPPLY/1622363525

        (b) This Comb-UID refers to a tuple consisting of name=value pairs:

            COMPID={CompId}

            COMPUID={CompUID}

            COMPREF=COMP/{CompId}/{CompUID}

            COMPDESC={description of the component}
                eg: "Cloudport Media Player"

            COMPSTARTEDAT={iso-8601-utc-with-milliseconds}
                see: https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)
                see: https://stackoverflow.com/a/50570660/1029379

            COMPSTATE={startup|initialization|running|restored|shutdown}
                startup     : component has just been loaded
                initialized : component has been configured
                running     : component is now running
                restarted   : component started with previous state after a 
                              crash. In this case the {CompUID} must take
                              on a new value
                shutdown    : component has been shutdown

            COMPVER={version}
                indentifies the software version of the component

        (c) The component MUST generate a log line

            (1) Every time there is a state change to the component
                (See COMPSTATE above).
            (2) As a carousel, minimally once every n-minutes

        (d) A reference to a remote component must be of the form
            COMP/{CompId}/-


    (B) Identifying functions

        (a) Every function can be uniquely identified through

            FNX/{IFId}/{IFVer}/{FNXId}

            where
                * 'FNX' is a keyword 

                * {IFId} is an {STRNW} referring to the interface name.

                * {IFVer} is a {version} referring to the software version
                  of the interface.

                * {FNXId} is an {STRNW} referring to the function name.

            example

                FNX/CPPLY/3.0/PLAY

        (b) A reference to a remote function must be of the form
            FNX/{IFId}/-/{FNXId}


    (C) Identifying events

        (a) Every event can be uniquely identified through

            EV/{EVClassId}/{EVClassVer}/{EVId}

            where
                * 'EV' is a keyword 

                * {EVClassId} is an {STRNW} referring to a semantically related
                  set of events.

                * {EVClassVer} is a {version} referring to the software version
                  of the {EVClassId}.

                * {EVId} is an {STRNW} referring to the event name.

            example

                EV/CPLIVEOP/2.0/ENTERBREAK

        (b) A reference to a remote event must be of the form
            EV/{EVClassId}/-/{EVId} or 
            EV/-/-/{EVId} if {EVId} is globally unique


    (D) Identifying transactions

        Every transaction can be uniquely identified through

        TXM/{TXMVer}/{TXId}

        where
            * 'TXM' is a keyword for 'Transaction Model'.

            * {TXMVer} is a {version} identification the version of this
              specification.

            * {TXId} is an {ANSNW} referring to a transaction instance.

        (a) Function invocation

            (1) In this case the transaction refers to a tuple consisting 
                of the following name=value pairs:

                TXREF=TXM/{TXMVer}/C/{TXId}
                    Indentifying the current transaction

                PARENTTXREF=TXM/{TXMVer}/P/{TXId}
                    Indentifying the parent/causal transaction

                FNXREF=FNX/{IFId}/{IFVer|-}/{FNXId}
                    Identifying the function
                    FNX/{IFId}/{-}/{FNXId} at the requestor and
                    FNX/{IFId}/{IFVer}/{FNXId} at the responder

                ACT={request|response}
                    Activity : A request or a response

                LOGLOC={req|resp}
                    req  => logged at requesting component end
                    resp => logged at responding component end

                COMPREF=COMP/{CompId}/{CompUID}
                    Identifying the component 

            (2) The above tuple MUST occur as a log line 

                At both the requestor and responder component ends
                every time a interface function invocation (request or
                response) is made.

            (3) The values of TXREF and PARENTTXREF must be piggybacked
                with function parameters as metadata.

        (b) Event publish

            (1) In the case of the publish of an event, the transaction refers
                to a tuple consisting of name=value pairs:

                TXREF=TXM/{TXMVer}/C/{TXId}
                    Indentifying the current transaction

                PARENTTXREF=TXM/{TXMVer}/P/{TXId}
                    Indentifying the parent/causal transaction

                EVREF=EV/{EVClassId}/{EVClassVer|-}/{EVId}
                    Identifying the event
                    EV/{EVClassId}/{EVClassVer}/{EVId} at the publisher and
                    EV/{EVClassId}/-/{EVId} at the consumer or
                    EV/-/-/{EVId} at the consumer if {EVId} is globally 
                    unique

                ACT='event'

                LOC={src|dest}
                    src  => logged at component that published the event
                    dest => logged at component that consumed the event

                COMPREF=COMP/{CompId}/{CompUID}
                    Identifying the component 

            (2) The above tuple MUST occur as a log line 

                Every time an event is published or consumed.

            (3) The values of TXREF and PARENTTXREF must be piggybacked
                with event attributes as metadata.


                        +--------------+
                        | Section - IV |
                        | NOTES        |
                        +--------------+


    (A) Operational perspective

        (a) Transaction logging at INFO level could be very useful at L2.
        (b) DEBUG log lines containing data elements with TXREF's could be 
            very useful at L3.
        (c) TXREF's could be yet another mechanism by which L2 can 
            communicate with L3.

    (B) Names

        If needed codes like those used in India Railways can be used
        for names of components, interfaces, functions and events.


                        +-------------+
                        | Section - V |
                        | EXAMPLES    |
                        +--------------+

                            TODO

                            -x-

